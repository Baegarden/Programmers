# 완전탐색 - Level 2 : 소수 찾기

from itertools import permutations

def isTrue(N):
    n = 2
    while n < N:
        if N % n == 0:
            return False
        n += 1
    return True
    
def solution(numbers):
    answer = 0
    arr = []
    for i in range(len(numbers)):
        arr.append(numbers[i])
        
    arr2 = []     
    for i in range(1, len(numbers)+1):
        for j in permutations(arr, i):
            arr2.append(int("".join(j)))
            
    arr3 = list(set(arr2))   
    for i in arr3:
        if i > 1 and isTrue(i):
            answer += 1        
    return answer


# 다른사람 풀이(재귀)
primeSet = set()

def isPrime(number):
    if number in (0, 1):
        return False
    for i in range(2, number):
        if number % i == 0:
            return False
    return True

def makeCombinations(str1, str2):
    if str1 != "":
        if isPrime(int(str1)):
            primeSet.add(int(str1))

    for i in range(len(str2)):
        makeCombinations(str1 + str2[i], str2[:i] + str2[i + 1:]) # 아직 이해못함(21.10.03)

def solution(numbers):
    makeCombinations("", numbers)
    answer = len(primeSet)
    return answer
